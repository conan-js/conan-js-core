import { State } from "./state";
import { IKeyValuePairs, WithMetadataArray } from "../../conan-utils/typesHelper";
import { ListenerDefType, SmListener, SmListenerDefLike } from "../events/stateMachineListeners";
import { ListenersController } from "../events/listenersController";
import { SmEventThread } from "../events/smEventThread";
import { TransactionTree } from "../../conan-tx/transactionTree";
import { SerializedSmEvent, SmTransition } from "../events/stateMachineEvents";
import { StateMachineCoreRead } from "./stateMachineCoreReader";
import { StateMachineCoreWrite } from "./stateMachineCoreWriter";
import { ReactionMetadata, Reaction, ReactionType } from "../reactions/reactor";
import { StateDef } from "./stateDef";
export declare class StateMachineCore<SM_ON_LISTENER extends SmListener> implements StateMachineCoreWrite, StateMachineCoreRead<SM_ON_LISTENER> {
    readonly name: string;
    readonly listeners: ListenersController<SM_ON_LISTENER>;
    readonly interceptors: ListenersController<SM_ON_LISTENER>;
    readonly stageDefsByKey: IKeyValuePairs<StateDef<any>>;
    private readonly eventThread;
    constructor(name: string, listeners: ListenersController<SM_ON_LISTENER>, interceptors: ListenersController<SM_ON_LISTENER>, stageDefsByKey: IKeyValuePairs<StateDef<any>>);
    getStateData(): any;
    getStateName(): string;
    addListener(listener: SmListenerDefLike<SM_ON_LISTENER>, type?: ReactionType): this;
    addInterceptor(interceptor: SmListenerDefLike<SM_ON_LISTENER>, type?: ReactionType): this;
    createReactions(eventName: string, type: ListenerDefType, txTree: TransactionTree): WithMetadataArray<Reaction<any>, ReactionMetadata>;
    deleteListeners(listenerNames: string[], type: ListenerDefType, txTree: TransactionTree): void;
    getStateDef(name: string): StateDef<any>;
    getEvents(): SerializedSmEvent[];
    moveToState(state: State<any, any>): void;
    moveToTransition(transition: SmTransition): void;
    getCurrentStateName(): string;
    getCurrentTransitionName(): string;
    private getListenerController;
    getName(): string;
    getState(): State;
    getEventThread(): SmEventThread;
}
